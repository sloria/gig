#!/usr/bin/env python
# -*- coding: utf-8 -*-
'''gig

A .gitignore template generator.

Usage:
  gig list [--global]
  gig <language> ... [--append --force --verbose --global]
  gig Python Ruby Clojure ...

Options:
  -h --help             Show this screen.
  --version             Show version.
  list                  List available languages. NOTE: Languages are case-sensitive.
  -a --append           If .gitignore already exists, append to it.
  -f --force            If .gitignore already exists, overwrite it.
  -g --global           Creates or appends to a global gitignore file in ~/.gitignore_global.
  -v --verbose          Toggle verbose output.
'''

import os
import sys
import logging
import subprocess
from docopt import docopt
import requests

__version__ = "0.2.0"
__author__ = "Steven Loria"
__license__ = "MIT"

API_URL = "https://api.github.com/gitignore/templates"
GLOBAL_URL = 'https://api.github.com/repos/github/gitignore/contents/Global/'
TEMPLATE_URL = 'https://raw.github.com/github/gitignore/master'
HEADER = "########## Generated by gig {0} ###########\n".format(__version__)
GLOBAL_GITIGNORE = os.path.expanduser(os.path.join("~", ".gitignore_global"))

def generate_gitignore(languages, global_=False):
    '''Return the .gitignore (a string) given a list of languages.'''
    gitignore = ''
    session = requests.Session()
    for language in languages:
        base_url = (TEMPLATE_URL + "/Global") if global_ else TEMPLATE_URL
        url = base_url + "/" + language + '.gitignore'
        res = session.get(url)
        if res.status_code == requests.codes.ok:
            content = res.text  # The gitignore template
            gitignore = '\n'.join([gitignore,
                                    "### {0} ###".format(language),
                                    content])
            logging.info("Ignoring {0}. . .".format(language))
        else:
            logging.debug(res.status_code)
            message = ("Couldn't get .gitignore for {0}. NOTE: Languages "
                        "are case-sensitive.".format(language))
            logging.error(message)
            continue
    return gitignore

def list_languages(global_=False):
    '''Output the list of available languages.'''
    request_url = GLOBAL_URL if global_ else API_URL
    res = requests.get(request_url)
    ok = res.status_code == requests.codes.ok
    if ok:
        resp_data = res.json()
        if global_:
            # Parse response json
            languages = [d['name'].split('.')[0] for d in resp_data
                            if d['name'] != 'README.md']
        else:
            languages = resp_data
        for language in languages:
            print(language)
    else:
        logging.debug(res.status_code)
        logging.error("Couldn't get language list. Please try again later.")
        return False
    return ok

def write_gitignore(languages, append=False, force=False, global_=False):
    write_mode = 'a' if append else 'w'
    destination = GLOBAL_GITIGNORE if global_ else '.gitignore'
    if os.path.isfile(destination) and not force and not append:
        logging.error(".gitignore already exists. Use the '--force' option to "
                        "force overwrite or '--append' to append to the file.")
        print(__doc__)
        return 1
    else:
        if global_:
            subprocess.call("git config --global core.excludesfile {0}"
                            .format(GLOBAL_GITIGNORE), shell=True)
        with open(destination, write_mode) as fp:
            if not append:
                fp.write(HEADER)
            fp.write(generate_gitignore(languages, global_=global_))
    return 0

def main():
    '''Main entry point for the gig CLI.'''
    args = docopt(__doc__, version=__version__)
    log_level = logging.INFO if args['--verbose'] else logging.ERROR
    logging.basicConfig(format='%(levelname)s: %(message)s', level=log_level)
    if args['list']:
        success = list_languages(global_=args['--global'])
        return sys.exit(0) if success else sys.exit(1)
    ret_code = write_gitignore(languages=args['<language>'],
                    append=args['--append'],
                    force=args['--force'],
                    global_=args['--global'])
    print("Done.")
    return sys.exit(ret_code)

if __name__ == '__main__':
    main()
